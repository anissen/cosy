// {
//     fn test() Str {} // TODO: Should fail because there is no return statements
//     print test()
// }

// @test('max of two positive numbers')
// test.eq(max(5, 6), 6)

// {
//     struct Point {   // Struct
//         mut x
//         var y
//     }
//     // instantiate struct
//     mut point = Point { x = 3, y = 4 }
// 
//     fn mutf(mut p Point) {
//         p.x = 5
//     }
//     print point
//     mutf(point) // TODO: Fail! Should be mut
//     print point
// }


// {
//     struct S {}
//     fn mutf(mut s S) {
//         print s
//     }
//     mut s = S {}
//     mutf(s) // TODO: Fail! Should be mut
// }


// {
//     // AST interpreter takes ~5 seconds on a 16" MacBook Pro
//     foreign fn random_int(n Num)

//     var n = 1000000
//     mut a = []
//     for 0..n {
//         a.push(0)
//     }
//     for 0..10 {
//         a[random_int(n)] = 1
//     }

//     var t0 = clock()
//     mut counter = 0
//     mut l = []
//     for j in 0..a.length {
//         if a[j] == 1 and a[j + 1] == 0 {
//             l.push(counter)
//         }
//         counter += 1
//     }
//     var t1 = clock()
//     print l
//     print 'Time spend: {(t1 - t0) / 1000} seconds'
// }

// fn reduce(arr Array Num, f Fn(Num, Num) Num, init Num) Num {
//     mut acc = init
//     for a in arr {
//         acc = f(acc, a)
//     }
//     return acc
// }

{
    // testing the bytecode code generator + disassembler + vm
    print 'before function'
    fn hello(x Num) {
        print 'hello from function'
        print x * x
    }
    print 'before call'
    hello(4)
    print 'after call'

    // var sum = reduce([1, 2, 3, 4, 5], fn(a, b) { return a + b }, 0)
    // var sum = [1, 2, 3, 4, 5].reduce(fn(a, b) { return a + b }, 0)
    // print sum
   
    // print 'answer: ' + 3
}
// mut x = [5,4,2,62,1]
// print x
// print x[2..4]
// x[2..4] = [9]
// print x
// print x[2..4]

// mut x = [2,3,4,5,6,7]
mut x = [2,3,4,5]
// x[1..2] = [6,7,8]
// x[-1..1] = [6,7,8]
// x[1..5] = [8,9]
// x[0..1] += 10
print x[1..3]
print x[3..1]
print x[-1..1]
print x == [2,6,7,8,9,5] // TODO: Fix array equality comparison

mut s = 'hello'
print s[1..4]
print s[4..1]
// s[1..4] = '??'
// print s
print 'done'