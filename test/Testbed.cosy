// {
//     fn test() Str {} // TODO: Should fail because there is no return statements
//     print test()
// }


// {
//     struct Point {   // Struct
//         mut x
//         var y
//     }
//     // instantiate struct
//     mut point = Point { x = 3, y = 4 }
// 
//     fn mutf(mut p Point) {
//         p.x = 5
//     }
//     print point
//     mutf(point) // TODO: Fail! Should be mut
//     print point
// }


// {
//     struct S {}
//     fn mutf(mut s S) {
//         print s
//     }
//     mut s = S {}
//     mutf(s) // TODO: Fail! Should be mut
// }


// {
//     // AST interpreter takes ~5 seconds on a 16" MacBook Pro
//     foreign fn random_int(n Num)

//     var n = 1000000
//     mut a = []
//     for 0..n {
//         a.push(0)
//     }
//     for 0..10 {
//         a[random_int(n)] = 1
//     }

//     var t0 = clock()
//     mut counter = 0
//     mut l = []
//     for j in 0..a.length {
//         if a[j] == 1 and a[j + 1] == 0 {
//             l.push(counter)
//         }
//         counter += 1
//     }
//     var t1 = clock()
//     print l
//     print 'Time spend: {(t1 - t0) / 1000} seconds'
// }

{
    // testing the bytecode code generator + disassembler + vm
    print 'before function'
    fn hello(x Num) {
        print 'hello from function'
        print x * x
    }
    print 'before call'
    hello(4)
    print 'after call'
}