{
    mut i = '{42 + 1 + 0 + 1}'
    print i
    i = 22
    print i
}

// -----------

{
    mut i // = 'hej'
    print i
    i = 3
    i = 'hej'
    print i
}

// -----------

{
    let s = 'hej'
    mut i
    print i
    i = 33
    print i
    i = s
    print i
}

// -----------

{
    mut x = 2
    x = fn() {
        print 'blah'
    }
    print x
}

// -----------

{
    mut x = fn() {
        return 'a string'
    }
    print 'x() = ' + x()
    x = fn() {
        return 12
    }
    print x()
    x = fn() {
        fn z() {
            return true
        }
        return z()
    }
    print 'x() = ' + x()
}

// -----------

{
    fn f() {
        return _
    }
    mut x = f()
    print x
}

// -----------

{
    fn f(arg) {
        let a = arg + 1
        print 'printing f arg: "' + a + '"'
    }
    f(12)
    f('str')
    f(true)
}

// -----------

{
    for i in '0'..'3' {
        print i
    }
}

// -----------

{
    for i in 0..3 {
        mut j = i
        j = 'hej'
        print j
    }
}

// -----------

{
    fn f(arg Num) {
        return arg
    }

    mut x = f(12)
    print x
    x = f('hej')
    print x
}

// -----------

{
    fn f(arg Str) {
        return arg
    }

    mut x = f(12)
    print x
    x = f('hej')
    print x
}

// -----------

{
    mut f = fn(x Num, y Str) {
        print '{x}{y}'
    }
    f(4, 'hej')
    f = fn(x Str, y Num) {
        print '{x}{y}'
    }
    f('dav', 5)
}

// -----------

{
    fn times(f Fn(Num), n Num) {
        for i in 0..n {
            f(i)
        }
    }
    // print times
    times(fn(x Num) { print 'called {x} time(s)' }, 3)
}

// -----------

{
    fn f(n Num) {
        return n + 23
    }

    fn f2(s Str) {
        return '{s}{45}'
    }

    mut x = f
    print x(3)
    x = f2
    print x('d')
}

// -----------

{
    fn square(x Num) {
        return x * x
    }
    mut s = square(5)
    s = square(s)
    print s
}

// -----------

{
    fn square(x Num) {
        return x * x
    }
    fn foo(x Num) {
        return '{x}'
    }
    mut s = square(5)
    s = foo(s)
    print s
}

// -----------

{
    fn gamble(x Num) Str {
        if x < 5 {
            return 5
        } else if x < 7 {
            return 'hej'
        } else {
            return 8
        }
    }
    mut s = gamble(3)
    print s
    s = gamble(6)
    print s
}

// -----------

{
    fn do_fun(f Fn(Num), n Num) {
        f(n)
    }
    do_fun(fn(x Num) { print 'i\'m fn {x}' }, 3)
}

// -----------

{
    fn counter(start Num) Fn() Num {
        return fn() {
            return start
        }
    }
    print counter(3)()
}

// -----------

{
    fn f(param Num) {
        print param * param
    }
    let param = 'hej'
    print param
    f(5)
}

// -----------

{
    struct S { mut s Num }
    fn mutate_struct(s) {
        s.s = 666
    }
    mutate_struct(S { s = 3 })
}

// -----------

{
    mut x = 4 < 5
    print x
    x = 6 // fails
    print x
}

// -----------

{
    mut x = 4
    x += 5
    print x
}

// -----------

{
    fn z() Fn(Num) Num {
        return fn(x Num) Num {
            return x + 2
        }
    }
    print z()(3)
}

{
    fn z() Fn(Num) Num {
        return fn(x) {
            return x + 2
        }
    }
    print z()(3)
}

{
    fn x() {
        return fn() Num {
            return 42
        } 
    }
    print x()()
}

{
    fn x() {
        return fn() {
            return 42
        } 
    }
    print x()()
}

// -----------

{
    let f = fn(z) {
        return z
    }
    let x Num = f(true)
    print x
}