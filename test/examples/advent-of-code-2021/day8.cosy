// https://adventofcode.com/2021/day/8

foreign fn read_lines(path Str) Array Str
foreign fn string_to_number(input Str) Num

mut input Array Str
var test_mode = true
if test_mode {
    input = 'be cfbegad cbdgef fgaecd cgeb fdcge agebfd fecdb fabcd edb | fdgacbe cefdb cefbgd gcbe
edbfga begcd cbg gc gcadebf fbgde acbgfd abcde gfcbed gfec | fcgedb cgb dgebacf gc
fgaebd cg bdaec gdafb agbcfd gdcbef bgcad gfac gcb cdgabef | cg cg fdcagb cbg
fbegcd cbd adcefb dageb afcb bc aefdc ecdab fgdeca fcdbega | efabcd cedba gadfec cb
aecbfdg fbg gf bafeg dbefa fcge gcbea fcaegb dgceab fcbdga | gecf egdcabf bgf bfgea
fgeab ca afcebg bdacfeg cfaedg gcfdb baec bfadeg bafgc acf | gebdcfa ecba ca fadegcb
dbcfg fgd bdegcaf fgec aegbdf ecdfab fbedc dacgb gdcebf gf | cefg dcbef fcge gbcadfe
bdfegc cbegaf gecbf dfcage bdacg ed bedf ced adcbefg gebcd | ed bcgafe cdgba cbgef
egadfb cdbfeg cegd fecab cgb gbdefca cg fgcdab egfdb bfceg | gbdfcae bgc cg cgb
gcafb gcf dcaebfg ecagb gf abcdeg gaef cafbge fdbac fegbdc | fgae cfgab fg bagce'.split('\n')
} else {
    input = read_lines('test/examples/advent-of-code-2021/data/day8.txt')
}

struct Data {
    mut segments Array Array Str
    mut output Array Array Str
}
mut all_data Array Data = []
for i in input {
    var parts = i.split(' | ')
    all_data.push(Data {
        segments = parts[0].split(' ').map(fn(s Str) {
            return s.split('').sort(fn(a Str, b Str) Num {
                return a.char_code_at(0) - b.char_code_at(0)
            })
        }),
        output = parts[1].split(' ').map(fn(s Str) {
            return s.split('').sort(fn(a Str, b Str) Num {
                return a.char_code_at(0) - b.char_code_at(0)
            })
        }),
    })
}

fn determine_output_digits(data Data) Str {
    mut deduced = [[],[],[],[],[],[],[],[],[],[]]

    fn get_matches(segment Array Str, i Num) {
        mut matches = 0
        for char in segment {
            for c in deduced[i] {
                if char == c {
                    matches += 1
                    break
                }
            }
        }
        return matches
    }

    //   0:      1:      2:      3:      4:
    //  aaaa    ....    aaaa    aaaa    ....
    // b    c  .    c  .    c  .    c  b    c
    // b    c  .    c  .    c  .    c  b    c
    //  ....    ....    dddd    dddd    dddd
    // e    f  .    f  e    .  .    f  .    f
    // e    f  .    f  e    .  .    f  .    f
    //  gggg    ....    gggg    gggg    ....

    //   5:      6:      7:      8:      9:
    //  aaaa    aaaa    aaaa    aaaa    aaaa
    // b    .  b    .  .    c  b    c  b    c
    // b    .  b    .  .    c  b    c  b    c
    //  dddd    dddd    ....    dddd    dddd
    // .    f  e    f  .    f  e    f  .    f
    // .    f  e    f  .    f  e    f  .    f
    //  gggg    gggg    ....    gggg    gggg

    for digit in data.segments {
        if digit.length == 2 { // digit must be a 1
            deduced[1] = digit
        } else if digit.length == 4 { // digit must be a 4
            deduced[4] = digit
        } else if digit.length == 3 { // digit must be a 7
            deduced[7] = digit
        } else if digit.length == 7 { // digit must be a 8
            deduced[8] = digit
        }
    }

    var digit_0_6_9 = data.segments.filter(fn(s Array Str) { return s.length == 6 }) // digit is 0, 6 or 9
    for digit in digit_0_6_9 {
        if get_matches(digit, 1) == 1 { // digit has 1 match with 1, must be 6
            deduced[6] = digit
        } else if get_matches(digit, 4) == 3 { // digit has 3 matches with 4, must be 0
            deduced[0] = digit
        } else { // digit must be 9
            deduced[9] = digit
        }
    }

    var digit_2_3_5 = data.segments.filter(fn(s Array Str) { return s.length == 5 }) // digit is 2, 3 or 5
    for digit in digit_2_3_5 {
        if get_matches(digit, 7) == 3 { // digit has 3 matches with 7, must be 3
            deduced[3] = digit
        } else if get_matches(digit, 4) == 2 { // digit has 2 matches with 4, must be 2
            deduced[2] = digit
        } else { // digit must be 5
            deduced[5] = digit
        }
    }

    mut digits Str = ''
    for output_digit in data.output {
        for i in 0..deduced.length {
            mut match = true
            var deduced_arr = deduced[i]
            if output_digit.length != deduced_arr.length {
                continue
            }
            for j in 0..deduced_arr.length {
                if deduced_arr[j] != output_digit[j] {
                    match = false
                    break
                }
            }
            if match {
                digits += '{i}'
                break
            }
        }
    }

    return digits
}

{ // Part 1
    mut digits_1_4_7_8 = 0
    for data in all_data {
        var digits = determine_output_digits(data)
        digits_1_4_7_8 += digits.split('').map(string_to_number).count(fn(digit Num) { return digit == 1 or digit == 4 or digit == 7 or digit == 8 })
    }
    print '# PART 1: Digits 1, 4, 7 and 8 appear {digits_1_4_7_8} times'
}

{ // Part 2
    mut sum = 0
    for data in all_data {
        var digits = determine_output_digits(data)
        var value = string_to_number(digits)
        sum += value
    }
    print '# PART 2: Sum of all output values is {sum}'
}