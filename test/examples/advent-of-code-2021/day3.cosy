// https://adventofcode.com/2021/day/3

foreign fn read_lines(path Str) Array Str
foreign fn string_to_number(input Str) Num

mut input Array Str
let test_mode = true
if test_mode {
    input = ['00100', '11110', '10110', '10111', '10101', '01111', '00111', '11100', '10000', '11001', '00010', '01010']
} else {
    input = read_lines('test/examples/advent-of-code-2021/data/day3.txt')
}

mut bit_input Array Array Num = input.map(fn (bits Str) Array Num {
    return bits.split('').map(string_to_number)
})

mut most_common_bits Array Num = []
mut least_common_bits Array Num = []

fn count_at_index(bit_arr Array Array Num, c Num, i Num) Num {
    mut count = 0
    for bits in bit_arr {
        let bit = bits[i]
        if bit == c {
            count += 1
        }
    }
    return count
}

fn most_common_bit_at_index(bit_arr Array Array Num,i Num) Num {
    let high_bits = count_at_index(bit_arr, 1, i)
    let low_bits = count_at_index(bit_arr, 0, i)
    if high_bits > low_bits {
        return 1
    } else {
        return 0
    }
}

let number_of_bits = bit_input[0].length
for i in 0..number_of_bits {
    let most_common = most_common_bit_at_index(bit_input, i)
    let least_common = 1 - most_common
    most_common_bits.push(most_common)
    least_common_bits.push(least_common)
}

fn binary_to_decimal(bits Array Num) Num {
    mut result = 0
    for bit in bits {
        result = result * 2 + bit
    }
    return result
}

{ // Part 1
    let most_common_bits_value = binary_to_decimal(most_common_bits)
    let least_common_bits_value = binary_to_decimal(least_common_bits)
    print '# PART 1: Submarine power: {most_common_bits_value * least_common_bits_value}'
}

{ // Part 2
    mut oxygen_rating_bits Array Array Num = bit_input
    for i in 0..number_of_bits {
        let low_count  = count_at_index(oxygen_rating_bits, 0, i)
        let high_count = count_at_index(oxygen_rating_bits, 1, i)
        mut most_common = 0
        if high_count >= low_count {
            most_common = 1
        }
        if oxygen_rating_bits.length == 1 {
            break
        }
        oxygen_rating_bits = oxygen_rating_bits.filter(fn(bits Array Num) Bool {
            return bits[i] == most_common
        })
    }

    mut co2_rating_bits Array Array Num = bit_input
    for i in 0..number_of_bits {
        let low_count  = count_at_index(co2_rating_bits, 0, i)
        let high_count = count_at_index(co2_rating_bits, 1, i)
        mut least_common = 1
        if low_count <= high_count {
            least_common = 0
        }
        if co2_rating_bits.length == 1 {
            break
        }
        co2_rating_bits = co2_rating_bits.filter(fn(bits Array Num) Bool {
            return bits[i] == least_common
        })
    }
    let oxygen_rating = binary_to_decimal(oxygen_rating_bits[0])
    let co2_rating = binary_to_decimal(co2_rating_bits[0])
    print '# PART 2: Life support rating: {oxygen_rating * co2_rating}'
}
