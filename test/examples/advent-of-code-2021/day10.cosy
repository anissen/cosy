// https://adventofcode.com/2021/day/10

foreign fn read_lines(path Str) Array Str

mut input Array Str
var test_mode = true
if test_mode {
    input = "[({(<(())[]>[[{[]{<()<>>
[(()[<>])]({[<{<<[]>>(
{([(<{}[<>[]}>{[]{[(<()>
(((({<>}<{<{<>}{[]{[]{}
[[<[([]))<([[{}[[()]]]
[{[{({}]{}}([{[{{{}}([]
{<[[]]>}<{[{[{[]{()[[[]
[<(<(<(<{}))><([]([]()
<{([([[(<>()){}]>(<<{{
<{([{{}}[<[[[<>{}]]]>[]]".split('\n')
} else {
    input = read_lines('test/examples/advent-of-code-2021/data/day10.txt')
}

var openers = ["(", "[", "{", "<"]
var closers = [")", "]", "}", ">"]
var error_values  = [3, 57, 1197, 25137]
var autocomplete_values = [1, 2, 3, 4]

struct Result {
    var errors Array Str
    var stack Array Str
}

fn parse(line Str) Result {
    mut errors Array Str = []
    mut stack Array Str = []
    for c in line.split('') {
        var index = closers.index_of(c)
        if (index != -1) { // closing
            if stack.is_empty() or stack.last() != openers[index] {
                errors.push(c)
            }
            stack.pop()
        } else { // opening
            stack.push(c)
        }
    }
    return Result { errors = errors, stack = stack }
}

mut error_points = 0
mut autocomplete_points_list = []
for line in input {
    mut autocomplete_points = 0
    var result = parse(line)
    if !result.errors.is_empty() {
        error_points += error_values[closers.index_of(result.errors[0])]
    } else {
        for c in result.stack.reverse() {
            autocomplete_points *= 5
            autocomplete_points += autocomplete_values[openers.index_of(c)]
        }
        autocomplete_points_list.push(autocomplete_points)
    }
}

{ // Part 1
    print '# PART 1: Syntax error points: {error_points}'
}

{ // Part 2
    var sorted_point_list = autocomplete_points_list.sort(fn(a Num, b Num) { return a - b })
    var total_points = sorted_point_list[(sorted_point_list.length - 1) / 2]
    print '# PART 2: Autocomplete points: {total_points}'
}