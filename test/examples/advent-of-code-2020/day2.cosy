foreign fn read_lines(path Str) Array Str
foreign fn stringToNumber(input Str) Num

var input = read_lines('test/examples/advent-of-code-2020/data/day2.txt')
// var input = ['1-3 a: abcde','1-3 b: cdefg','2-9 c: ccccccccc']

struct Password {
    var min Num
    var max Num
    var char Str
    var pass Array Str
}

fn parse(str Str) Password {
    var parts = str.split(' ')  // ['1-3', 'a:', 'abcde'] from '1-3 a: abcde'
	var min_max = parts.get(0).split('-') // [1, 3] from '1-3
    var min = stringToNumber(min_max.get(0))
    var max = stringToNumber(min_max.get(1))
    var char = parts.get(1).split(':').get(0) // 'a' from 'a:'
    var pass = parts.get(2)
    return Password { min = min, max = max, char = char, pass = pass.split('') }
}

fn validate_part_1(p Password) {
    var char_count = p.pass.count(fn (char Str) {
        return char == p.char
    })
    return char_count >= p.min and char_count <= p.max
}

fn validate_part_2(p Password) {
    var first_char_matches = p.pass.get(p.min - 1) == p.char
    var second_char_matches = p.pass.get(p.max - 1) == p.char
    if first_char_matches and second_char_matches {
        return false
    }
    return first_char_matches or second_char_matches
}

var parsed_input = input.map(parse)
var valid_count_part_1 = parsed_input.filter(validate_part_1)
print '# PART 1: ' + valid_count_part_1.length + ' valid passwords'
var valid_count_part_2 = parsed_input.filter(validate_part_2)
print '# PART 2: ' + valid_count_part_2.length + ' valid passwords'
