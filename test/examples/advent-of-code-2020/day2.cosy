foreign fn read_lines(path Str) Array Str
foreign fn stringToNumber(input Str) Num

var input = read_lines('test/examples/advent-of-code-2020/data/day2.txt')
// var input = ['1-3 a: abcde','1-3 b: cdefg','2-9 c: ccccccccc']

struct Password {
    var min Num
    var max Num
    var char Str
    var pass Array Str
}

fn parse(str Str) Password {
    var parts = str.split(' ')  // ['1-3', 'a:', 'abcde'] from '1-3 a: abcde'
	var min_max = parts.get(0).split('-') // [1, 3] from '1-3
    var min = stringToNumber(min_max.get(0))
    var max = stringToNumber(min_max.get(1))
    var char = parts.get(1).split(':').get(0) // 'a' from 'a:'
    var pass = parts.get(2)
    return Password { min = min, max = max, char = char, pass = pass.split('') }
}

fn validate_part_1(p Password) {
    mut char_count = 0
    for char in p.pass {
        if char == p.char {
            char_count += 1
        }
    }
    return char_count >= p.min and char_count <= p.max
}

fn validate_part_2(p Password) {
    var first_char_matches = p.pass.get(p.min - 1) == p.char
    var second_char_matches = p.pass.get(p.max - 1) == p.char
    if first_char_matches and second_char_matches {
        return false
    }
    return first_char_matches or second_char_matches
}

mut valid_count_part_1 = 0
mut valid_count_part_2 = 0
for s in input {
    if s.length == 0 {
        continue
    }
    var p = parse(s)
    if validate_part_1(p) {
        print 'Valid:   ' + s
        valid_count_part_1 += 1
    } else {
        print 'Invalid: ' + s
    }

    if validate_part_2(p) {
        print 'Valid:   ' + s
        valid_count_part_2 += 1
    } else {
        print 'Invalid: ' + s
    }
}
print '# PART 1: ' + valid_count_part_1 + ' valid passwords'
print '# PART 2: ' + valid_count_part_2 + ' valid passwords'
