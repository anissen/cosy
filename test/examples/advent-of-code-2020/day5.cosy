// https://adventofcode.com/2020/day/5

foreign fn read_lines(path Str) Array Str

mut input Array Str
var test_mode = true
if test_mode {
    input = ['FBFBBFFRLR', 'BFFFBBFRRR', 'FFFBBBFRRR', 'BBFFBBFRLL']
} else {
    input = read_lines('test/examples/advent-of-code-2020/data/day5.txt')
}

fn get_row_partioning(arr Array Str) Array Bool {
    return arr.filter(fn(i Str) {
        return i == 'F' or i == 'B'
    }).map(fn(i Str) {
        return i == 'F'
    })
}
fn get_col_partioning(arr Array Str) {
    return arr.filter(fn(i Str) {
        return i == 'L' or i == 'R'
    }).map(fn(i Str) {
        return i == 'L'
    })
}

fn bsp(bsp_input Array Bool, max Num) {
    mut res_min = 0
    mut res_max = max
    for b in bsp_input {
        if b {
            res_max = res_min + (res_max - res_min - 1) / 2
        } else {
            res_min = res_min + (res_max - res_min + 1) / 2
        }
    }
    if res_min != res_max {
        print 'ERROR: Unique value not found'
    }
    return res_min
}

mut seat_ids Array Num = []
for l in input {
    var input_array = l.split('')
    var row = bsp(get_row_partioning(input_array), 127)
    var col = bsp(get_col_partioning(input_array), 7)
    var seat_id = row * 8 + col
    seat_ids.push(seat_id)
}
var sorted_seat_ids = seat_ids.sort(fn(a Num, b Num) { return a - b })

// Part 1
{
    mut highest_seat_id = sorted_seat_ids.get(sorted_seat_ids.length - 1)
    print '# PART 1: Highest seat ID: ' + highest_seat_id
}

// Part 2
fn part_2() {
    mut value = sorted_seat_ids.get(0)
    for i in 1..sorted_seat_ids.length {
        value += 1
        var v = sorted_seat_ids.get(i)
        if v != value {
            print '# PART 2: Empty seat at seat ID: ' + value
            return _
        }
    }
}
part_2()
