// This function takes last element as pivot, places the pivot element at its correct position in the sorted 
// array, and places all values smaller than pivot to left of pivot and all greater elements to right of pivot.
fn partition(mut arr Array Num, low Num, high Num) {
    mut i = (low - 1)           // Index of smaller element.
    let pivot = arr[high]
  
    for j in low..high {
        // If current element is smaller than or equal to pivot.
        if arr[j] <= pivot {
            // Increment index of smaller element.
            i = i + 1
            // Swap i and j
            let tmp = arr[i]
            arr[i] = arr[j]
            arr[j] = tmp
        }
    }
  
    // Swap (i + 1) and (high)
    let tmp = arr[i + 1]
    arr[i + 1] = arr[high]
    arr[high] = tmp
    return (i + 1)
}
  
// Sort an array using the QuickSort algorithm
// arr: Array to be sorted
// low: Starting index 
// high: Ending index
fn quick_sort(mut arr Array Num, low Num, high Num) {
    if arr.length == 1 {
        return arr 
    }
    if low < high {
        let partition_index = partition(mut arr, low, high) 
  
        // Recursively sort elements before and after partition.
        quick_sort(arr, low, partition_index - 1) 
        quick_sort(arr, partition_index + 1, high)
    }
}
  
// Example
mut arr = [10, 7, 8, 9, 1, 5] 
print 'Input array is: '
print arr
let n = arr.length
quick_sort(mut arr, 0, n - 1)
print 'Sorted array is: '
print arr